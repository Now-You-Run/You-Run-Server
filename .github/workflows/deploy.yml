name: Deploy Spring Boot to EC2

on:
  workflow_dispatch:
  push:
    branches:
      - develop

# 환경 변수 설정
env:
  AWS_REGION: ap-northeast-2  # 본인의 AWS 리전으로 변경하세요.
  ECR_REPOSITORY: you-run # 본인의 ECR 리포지토리 이름으로 변경하세요.
  ECR_REPOSITORY_NGINX: you-run-nginx
  COMPOSE_FILE_PATH: /home/ubuntu/ # 서버에 docker-compose.yml 파일이 있는 경로

jobs:
  # 1. Docker 이미지를 빌드하고 ECR에 푸시하는 Job
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 1.1 소스 코드를 체크아웃합니다.
      - name: Checkout source code
        uses: actions/checkout@v3

      # 1.2 AWS 자격 증명을 설정합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 1.3 AWS ECR에 로그인합니다.
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 캐시 기능을 지원하는 빌드 환경을 설정합니다.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. 이미지 태그들을 정의합니다.
      # 고유 태그(Git SHA)와 latest 태그를 모두 사용합니다.
      - name: Define image tags
        id: image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          UNIQUE_TAG=${{ github.sha }}
          echo "tags=${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${UNIQUE_TAG},${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:latest" >> $GITHUB_OUTPUT

      # 5. Docker 이미지를 빌드하고 ECR에 푸시합니다.
      # 정의된 두 개의 태그를 모두 사용해 이미지를 푸시합니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.image.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx  # nginx 서브 디렉토리를 컨텍스트로 사용
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NGINX }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NGINX }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

