name: Deploy Spring Boot to EC2

on:
  workflow_dispatch:
  push:
    branches:
      - develop

# 환경 변수 설정
env:
  AWS_REGION: ap-northeast-2  # 본인의 AWS 리전으로 변경하세요.
  ECR_REPOSITORY: you-run # 본인의 ECR 리포지토리 이름으로 변경하세요.
  COMPOSE_FILE_PATH: /home/ubuntu/ # 서버에 docker-compose.yml 파일이 있는 경로

jobs:
  # 1. Docker 이미지를 빌드하고 ECR에 푸시하는 Job
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 1.1 소스 코드를 체크아웃합니다.
      - name: Checkout source code
        uses: actions/checkout@v3

      # 1.2 AWS 자격 증명을 설정합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 1.3 AWS ECR에 로그인합니다.
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 1.4 이미지 태그를 생성합니다. (커밋 해시를 사용해 고유성 보장)
      - name: Generate image tag
        id: image
        run: echo "tag=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      # 1.5 Docker 이미지를 빌드하고 ECR에 푸시합니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.image.outputs.tag }}
          no-cache: true

  # 2. 서버에 접속하여 이미지를 배포하는 Job
  deploy:
    # 'build-and-push' Job이 성공해야만 실행됩니다.
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # 2.1 SSH를 통해 원격 서버에 명령을 실행합니다.
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # docker-compose.yml 파일이 있는 디렉토리로 이동합니다.
            cd ${{ env.COMPOSE_FILE_PATH }}
            
            # ECR에 로그인합니다. (서버에도 AWS CLI가 설치되어 있고 자격 증명이 설정되어 있어야 함)
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
            
            # 1. 현재 워크플로우의 커밋 해시(태그)를 가져옵니다.
            IMAGE_TAG=${{ github.sha }}
            
            # 2. ECR 리포지토리의 기본 주소를 만듭니다.
            ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
            
            # 3. 배포할 이미지의 전체 경로를 완성합니다.
            FULL_IMAGE_NAME=${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}
            
            # 4. 완성된 이미지 경로를 .env 파일에 기록합니다.
            echo "SPRING_IMAGE=${FULL_IMAGE_NAME}" > .env
            
            docker-compose up -d --no-deps --force-recreate spring-app
